use num_bigint::{BigUint, RandBigInt};
use rand::Rng;

/// Represents the parameters and operations for the Chaum-Pedersen protocol.
pub struct Protocol {
    /// A large prime number.
    pub p: BigUint,
    /// A prime order subgroup size.
    pub q: BigUint,
    /// Generator for the subgroup.
    pub g: BigUint,
    /// Another generator.
    pub h: BigUint,
}

impl Protocol {
    /// Computes two parameters based on the secret value `x`.
    ///
    /// ## Returns
    ///
    /// A tuple `(param1, param2)` where:
    /// - `param1` is `g^x (mod p)`
    /// - `param2` is `h^x (mod p)`
    pub fn compute_parameters(&self, x: &BigUint) -> (BigUint, BigUint) {
        let param1 = self.g.modpow(x, &self.p);
        let param2 = self.h.modpow(x, &self.p);
        (param1, param2)
    }

    /// Computes `s = (k - c * x) (mod q)`.
    ///
    /// ## Arguments
    ///
    /// * `k` - A random value.
    /// * `c` - The challenge.
    /// * `x` - The secret value.
    ///
    /// ## Returns
    ///
    /// The computed `s` value.
    pub fn solve_challenge(&self, k: &BigUint, c: &BigUint, x: &BigUint) -> BigUint {
        if *k >= c * x {
            return (k - c * x).modpow(&BigUint::from(1u32), &self.q);
        }
        &self.q - (c * x - k).modpow(&BigUint::from(1u32), &self.q)
    }

    /// Verifies the proof based on the provided parameters and proof values.
    ///
    /// ## Arguments
    ///
    /// * `r1` ==> `g^k (mod p)`, where `k` is a random value generated by prover.
    /// * `r2` ==> `h^k (mod p)`.
    /// * `y1` ==> `g^x (mod p)`.
    /// * `y2` ==> `h^x (mod p)`.
    /// * `c`  - The challenge.
    /// * `s`  - The computed `s` value.
    ///
    /// ## Returns
    ///
    /// `true` if the proof is valid, and `false` otherwise.
    pub fn verify_proof(
        &self,
        r1: &BigUint,
        r2: &BigUint,
        y1: &BigUint,
        y2: &BigUint,
        c: &BigUint,
        s: &BigUint,
    ) -> bool {
        // cond1: r1 == (g^s * y1^c) (mod p)
        let cond1 = *r1
            == (&self.g.modpow(s, &self.p) * y1.modpow(c, &self.p))
                .modpow(&BigUint::from(1u32), &self.p);

        // cond2: r2 == (h^s * y2^c) (mod p)
        let cond2 = *r2
            == (&self.h.modpow(s, &self.p) * y2.modpow(c, &self.p))
                .modpow(&BigUint::from(1u32), &self.p);

        cond1 && cond2
    }
}

/// Generates a random `BigUint` below a given bound.
///
/// ## Arguments
///
/// * `bound` - The upper bound for the generated random `BigUint`.
///
/// ## Returns
///
/// A random `BigUint` value less than `bound`.
pub fn generate_random_biguint_below(bound: &BigUint) -> BigUint {
    let mut rng = rand::thread_rng();
    rng.gen_biguint_below(bound)
}

/// Generates a random alphanumeric string of the specified length.
pub fn generate_random_string(len: usize) -> String {
    rand::thread_rng()
        .sample_iter(rand::distributions::Alphanumeric)
        .take(len)
        .map(char::from)
        .collect()
}

/// Generates a 1024-bit MODP Group with 160-bit Prime Order Subgroup constants
/// as defined in RFC 5114 Section 2.1: https://www.rfc-editor.org/rfc/rfc5114#section-2.1.
///
/// ## Returns
///
/// A `Protocol` object containing the parameters for the group.
pub fn generate_1024bit_group_with_160bit_constants() -> Protocol {
    // The prime
    let p = BigUint::from_bytes_be(&hex::decode("B10B8F96A080E01DDE92DE5EAE5D54EC52C99FBCFB06A3C69A6A9DCA52D23B616073E28675A23D189838EF1E2EE652C013ECB4AEA906112324975C3CD49B83BFACCBDD7D90C4BD7098488E9C219A73724EFFD6FAE5644738FAA31A4FF55BCCC0A151AF5F0DC8B4BD45BF37DF365C1A65E68CFDA76D4DA708DF1FB2BC2E4A4371").unwrap());

    // The generator
    let g = BigUint::from_bytes_be(&hex::decode("A4D1CBD5C3FD34126765A442EFB99905F8104DD258AC507FD6406CFF14266D31266FEA1E5C41564B777E690F5504F213160217B4B01B886A5E91547F9E2749F4D7FBD7D3B9A92EE1909D0D2263F80A76A6A24C087A091F531DBF0A0169B6A28AD662A4D18E73AFA32D779D5918D08BC8858F4DCEF97C2A24855E6EEB22B3B2E5").unwrap());

    // The generator generates a prime-order subgroup of size:
    let q =
        BigUint::from_bytes_be(&hex::decode("F518AA8781A8DF278ABA4E7D64B7CB9D49462353").unwrap());

    // Another generator:
    // h = g^i, where i == 266FEA1E5C41564B777E69
    let i = BigUint::from_bytes_be(&hex::decode("266FEA1E5C41564B777E69").unwrap());
    let h = g.modpow(&i, &p);

    Protocol { p, q, g, h }
}

/// Generates a 2048-bit MODP Group with 256-bit Prime Order Subgroup constants
/// as defined in RFC 5114 Section 2.3: https://www.rfc-editor.org/rfc/rfc5114#section-2.3.
///
/// ## Returns
///
/// A `Protocol` object containing the parameters for the group.
pub fn generate_2048bit_group_with_256bit_constants() -> Protocol {
    // The prime
    let p = BigUint::from_bytes_be(&hex::decodeunwrap());

    // The generator
    let g = BigUint::from_bytes_be(&hex::decode("3FB32C9B73134D0B2E77506660EDBD484CA7B18F21EF205407F4793A1A0BA12510DBC15077BE463FFF4FED4AAC0BB555BE3A6C1B0C6B47B1BC3773BF7E8C6F62901228F8C28CBB18A55AE31341000A650196F931C77A57F2DDF463E5E9EC144B777DE62AAAB8A8628AC376D282D6ED3864E67982428EBC831D14348F6F2F9193B5045AF2767164E1DFC967C1FB3F2E55A4BD1BFFE83B9C80D052B985D182EA0ADB2A3B7313D3FE14C8484B1E052588B9B7D2BBD2DF016199ECD06E1557CD0915B3353BBB64E0EC377FD028370DF92B52C7891428CDC67EB6184B523D1DB246C32F63078490F00EF8D647D148D47954515E2327CFEF98C582664B4C0F6CC41659").unwrap());

    // The generator generates a prime-order subgroup of size:
    let q = BigUint::from_bytes_be(
        &hex::decode("8CF83642A709A097B447997640129DA299B1A47D1EB3750BA308B0FE64F5FBD3").unwrap(),
    );

    // Another generator:
    // h = g^i, where i == 266FEA1E5C41564B777E69
    let i = BigUint::from_bytes_be(&hex::decode("266FEA1E5C41564B777E69").unwrap());
    let h = g.modpow(&i, &p);

    Protocol { p, q, g, h }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_protocol_with_small_hardcoded_numbers() {
        let protocol = Protocol {
            p: BigUint::from(23u32),
            q: BigUint::from(11u32),
            g: BigUint::from(4u32),
            h: BigUint::from(9u32),
        };

        let x = BigUint::from(6u32);
        let k = BigUint::from(7u32);

        let (y1, y2) = protocol.compute_parameters(&x);
        assert_eq!(y1, BigUint::from(2u32));
        assert_eq!(y2, BigUint::from(3u32));

        let (r1, r2) = protocol.compute_parameters(&k);
        assert_eq!(r1, BigUint::from(8u32));
        assert_eq!(r2, BigUint::from(4u32));

        let c = BigUint::from(4u32);
        let s = protocol.solve_challenge(&k, &c, &x);
        assert_eq!(s, BigUint::from(5u32));

        let verified = protocol.verify_proof(&r1, &r2, &y1, &y2, &c, &s);
        assert!(verified);

        // forged secrets
        let forged_x = BigUint::from(7u32);
        let forged_s = protocol.solve_challenge(&k, &c, &forged_x);
        let verified = protocol.verify_proof(&r1, &r2, &y1, &y2, &c, &forged_s);
        assert!(!verified);
    }

    #[test]
    fn test_protocol_with_random_numbers() {
        let protocol = Protocol {
            p: BigUint::from(23u32),
            q: BigUint::from(11u32),
            g: BigUint::from(4u32),
            h: BigUint::from(9u32),
        };

        let x = BigUint::from(6u32);
        let k = generate_random_biguint_below(&protocol.q);

        let (y1, y2) = protocol.compute_parameters(&x);
        assert_eq!(y1, BigUint::from(2u32));
        assert_eq!(y2, BigUint::from(3u32));

        let (r1, r2) = protocol.compute_parameters(&k);

        let c = generate_random_biguint_below(&protocol.q);
        let s = protocol.solve_challenge(&k, &c, &x);

        let verified = protocol.verify_proof(&r1, &r2, &y1, &y2, &c, &s);
        assert!(verified);
    }

    #[test]
    fn test_1024bit_group_with_160bit_constants() {
        let Protocol { p, q, g, h } = generate_1024bit_group_with_160bit_constants();
        let protocol = Protocol { p, q, g, h };

        let x = generate_random_biguint_below(&protocol.q);
        let (y1, y2) = protocol.compute_parameters(&x);

        let k = generate_random_biguint_below(&protocol.q);
        let (r1, r2) = protocol.compute_parameters(&k);

        let c = generate_random_biguint_below(&protocol.q);
        let s = protocol.solve_challenge(&k, &c, &x);

        let verified = protocol.verify_proof(&r1, &r2, &y1, &y2, &c, &s);
        assert!(verified);
    }

    #[test]
    fn test_2048bit_group_with_256bit_constants() {
        let Protocol { p, q, g, h } = generate_2048bit_group_with_256bit_constants();
        let protocol = Protocol { p, q, g, h };

        let x = generate_random_biguint_below(&protocol.q);
        let (y1, y2) = protocol.compute_parameters(&x);

        let k = generate_random_biguint_below(&protocol.q);
        let (r1, r2) = protocol.compute_parameters(&k);

        let c = generate_random_biguint_below(&protocol.q);
        let s = protocol.solve_challenge(&k, &c, &x);

        let verified = protocol.verify_proof(&r1, &r2, &y1, &y2, &c, &s);
        assert!(verified);
    }
}
